info: starting promise gs515p0d
info: resolving promise gs515p0d
info: starting promise gs516qdu
info: starting promise gs516qdv
info: resolving promise gs516qdv
info: starting promise gs516qdw
info: resolving promise gs516qdw
info: starting promise gs516qdx
info: resolving promise gs516qdx
debug: the items in each[ 'one', 'two', 'three', 'four', 'five' ]
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'two', 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'one' }
info: starting promise gs516qdy
info: resolving promise gs516qdy
debug: return from body.render: '<li>one</li>'
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'two' }
info: starting promise gs516qdz
info: resolving promise gs516qdz
debug: return from body.render: '<li>two</li>'
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'three' }
info: starting promise gs516qe0
info: resolving promise gs516qe0
debug: return from body.render: '<li>three</li>'
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'four' }
info: starting promise gs516qe1
info: resolving promise gs516qe1
debug: return from body.render: '<li>four</li>'
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'five' }
info: starting promise gs516qe2
info: resolving promise gs516qe2
debug: return from body.render: '<li>five</li>'
debug: the items in each:[ 'one', 'two', 'three', 4, 'five' ]
debug: the keys in each:[ 'key1', 'key2', 'key3', 'key4', 'key5' ]
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'one',
  key: 'key1' }
info: starting promise gs516qe3
info: resolving promise gs516qe3
debug: return from body.render: '<li>key1, one</li>'
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'two',
  key: 'key2' }
info: starting promise gs516qe4
info: resolving promise gs516qe4
debug: return from body.render: '<li>key2, two</li>'
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'three',
  key: 'key3' }
info: starting promise gs516qe5
info: resolving promise gs516qe5
debug: return from body.render: '<li>key3, three</li>'
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 4,
  key: 'key4' }
info: starting promise gs516qe6
info: resolving promise gs516qe6
debug: return from body.render: '<li>key4, 4</li>'
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'five',
  key: 'key5' }
info: starting promise gs516qe7
info: resolving promise gs516qe7
debug: return from body.render: '<li>key5, five</li>'
info: resolving promise gs516qdu
info: starting promise gs517hr1
info: starting promise gs517hr3
info: resolving promise gs517hr3
info: starting promise gs517hr4
info: resolving promise gs517hr4
debug: the items in each[ 'one', 'two', 'three', 'four', 'five' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'two', 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one' }
info: starting promise gs517hr5
info: resolving promise gs517hr5
debug: return from body.render: '<li>one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two' }
info: starting promise gs517hr6
info: resolving promise gs517hr6
debug: return from body.render: '<li>two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three' }
info: starting promise gs517hr7
info: resolving promise gs517hr7
debug: return from body.render: '<li>three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'four' }
info: starting promise gs517hr8
info: resolving promise gs517hr8
debug: return from body.render: '<li>four</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five' }
info: starting promise gs517hr9
info: resolving promise gs517hr9
debug: return from body.render: '<li>five</li>'
debug: the items in each:[ 'one', 'two', 'three', 4, 'five' ]
debug: the keys in each:[ 'key1', 'key2', 'key3', 'key4', 'key5' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one',
  key: 'key1' }
info: starting promise gs517hra
info: resolving promise gs517hra
debug: return from body.render: '<li>key1, one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two',
  key: 'key2' }
info: starting promise gs517hrb
info: resolving promise gs517hrb
debug: return from body.render: '<li>key2, two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three',
  key: 'key3' }
info: starting promise gs517hrc
info: resolving promise gs517hrc
debug: return from body.render: '<li>key3, three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 4,
  key: 'key4' }
info: starting promise gs517hrd
info: resolving promise gs517hrd
debug: return from body.render: '<li>key4, 4</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five',
  key: 'key5' }
info: starting promise gs517hre
info: resolving promise gs517hre
debug: return from body.render: '<li>key5, five</li>'
info: resolving promise gs517hr2
info: starting promise gs517hrf
info: starting promise gs517hrg
info: resolving promise gs517hrg
info: resolving promise gs517hrf
info: resolving promise gs517hr1
info: starting promise gsgi1no7
info: starting promise gsgi1no8
info: resolving promise gsgi1noe
debug: return from body.render: '<li>four</li>'
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'five' }
info: starting promise gsgi1nof
info: resolving promise gsgi1nof
debug: return from body.render: '<li>five</li>'
debug: the items in each:[ 'one', 'two', 'three', 4, 'five' ]
debug: the keys in each:[ 'key1', 'key2', 'key3', 'key4', 'key5' ]
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'one',
  key: 'key1' }
info: starting promise gsgi1nog
info: resolving promise gsgi1nog
debug: return from body.render: '<li>key1, one</li>'
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'two',
  key: 'key2' }
info: starting promise gsgi1noh
info: resolving promise gsgi1noh
debug: return from body.render: '<li>key2, two</li>'
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'three',
  key: 'key3' }
info: starting promise gsgi1noi
info: resolving promise gsgi1noi
debug: return from body.render: '<li>key3, three</li>'
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 4,
  key: 'key4' }
info: starting promise gsgi1noj
info: resolving promise gsgi1noj
debug: return from body.render: '<li>key4, 4</li>'
debug: the context:{ title: 'Test Template',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  content: 'This is a test template',
  var1: 'some random text',
  var2: '354',
  item: 'five',
  key: 'key5' }
info: starting promise gsgi1nok
info: resolving promise gsgi1nok
debug: return from body.render: '<li>key5, five</li>'
info: resolving promise gsgi1no7
info: starting promise gsgi1v9h
info: starting promise gsgi1v9i
info: starting promise gsgi1v9j
info: resolving promise gsgi1v9j
info: starting promise gsgi1v9k
info: resolving promise gsgi1v9k
debug: the items in each[ 'one', 'two', 'three', 'four', 'five' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'two', 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one' }
info: starting promise gsgi1v9l
info: resolving promise gsgi1v9l
debug: return from body.render: '<li>one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two' }
info: starting promise gsgi1v9m
info: resolving promise gsgi1v9m
debug: return from body.render: '<li>two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three' }
info: starting promise gsgi1v9n
info: resolving promise gsgi1v9n
debug: return from body.render: '<li>three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'four' }
info: starting promise gsgi1v9o
info: resolving promise gsgi1v9o
debug: return from body.render: '<li>four</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five' }
info: starting promise gsgi1v9p
info: resolving promise gsgi1v9p
debug: return from body.render: '<li>five</li>'
debug: the items in each:[ 'one', 'two', 'three', 4, 'five' ]
debug: the keys in each:[ 'key1', 'key2', 'key3', 'key4', 'key5' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one',
  key: 'key1' }
info: starting promise gsgi1v9q
info: resolving promise gsgi1v9q
debug: return from body.render: '<li>key1, one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two',
  key: 'key2' }
info: starting promise gsgi1v9r
info: resolving promise gsgi1v9r
debug: return from body.render: '<li>key2, two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three',
  key: 'key3' }
info: starting promise gsgi1v9s
info: resolving promise gsgi1v9s
debug: return from body.render: '<li>key3, three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 4,
  key: 'key4' }
info: starting promise gsgi1v9t
info: resolving promise gsgi1v9t
debug: return from body.render: '<li>key4, 4</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five',
  key: 'key5' }
info: starting promise gsgi1v9u
info: resolving promise gsgi1v9u
debug: return from body.render: '<li>key5, five</li>'
info: resolving promise gsgi1v9i
info: starting promise gsgi1v9v
info: starting promise gsgi1v9w
info: resolving promise gsgi1v9w
info: resolving promise gsgi1v9v
info: resolving promise gsgi1v9h
info: starting promise gsgi23n9
info: resolving promise gsgi23n9
info: starting promise gtsybemb
info: resolving promise gtsybemk
debug: return from body.render: '<li>key1, one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two',
  key: 'key2' }
info: starting promise gtsybeml
info: resolving promise gtsybeml
debug: return from body.render: '<li>key2, two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three',
  key: 'key3' }
info: starting promise gtsybemm
info: resolving promise gtsybemm
debug: return from body.render: '<li>key3, three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 4,
  key: 'key4' }
info: starting promise gtsybemn
info: resolving promise gtsybemn
debug: return from body.render: '<li>key4, 4</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five',
  key: 'key5' }
info: starting promise gtsybemo
info: starting promise gtsydsh4
info: starting promise gtsydsh6
info: resolving promise gtsydsh6
info: starting promise gtsydsh7
info: resolving promise gtsydsh7
debug: the items in each[ 'one', 'two', 'three', 'four', 'five' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'two', 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one' }
info: starting promise gtsydsh8
info: resolving promise gtsydsh8
debug: return from body.render: '<li>one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two' }
info: starting promise gtsydsh9
info: resolving promise gtsydsh9
debug: return from body.render: '<li>two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three' }
info: starting promise gtsydsha
info: resolving promise gtsydsha
debug: return from body.render: '<li>three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'four' }
info: starting promise gtsydshb
info: resolving promise gtsydshb
debug: return from body.render: '<li>four</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five' }
info: starting promise gtsydshc
info: resolving promise gtsydshc
debug: return from body.render: '<li>five</li>'
debug: the items in each:[ 'one', 'two', 'three', 4, 'five' ]
debug: the keys in each:[ 'key1', 'key2', 'key3', 'key4', 'key5' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one',
  key: 'key1' }
info: starting promise gtsydshd
info: resolving promise gtsydshd
debug: return from body.render: '<li>key1, one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two',
  key: 'key2' }
info: starting promise gtsydshe
info: resolving promise gtsydshe
debug: return from body.render: '<li>key2, two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three',
  key: 'key3' }
info: starting promise gtsydshf
info: resolving promise gtsydshf
debug: return from body.render: '<li>key3, three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 4,
  key: 'key4' }
info: starting promise gtsydshg
info: starting promise gtt0tvab
info: starting promise gtt0tvac
info: starting promise gtt0tvad
info: resolving promise gtt0tvad
info: starting promise gtt0tvae
info: resolving promise gtt0tvae
debug: the items in each[ 'one', 'two', 'three', 'four', 'five' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'two', 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one' }
info: starting promise gtt0tvaf
info: resolving promise gtt0tvaf
debug: return from body.render: '<li>one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two' }
info: starting promise gtt0tvag
info: resolving promise gtt0tvag
debug: return from body.render: '<li>two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three' }
info: starting promise gtt0tvah
info: resolving promise gtt0tvah
debug: return from body.render: '<li>three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'four' }
info: starting promise gtt0tvai
info: resolving promise gtt0tvai
debug: return from body.render: '<li>four</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five' }
info: starting promise gtt0tvaj
info: resolving promise gtt0tvaj
debug: return from body.render: '<li>five</li>'
debug: the items in each:[ 'one', 'two', 'three', 4, 'five' ]
debug: the keys in each:[ 'key1', 'key2', 'key3', 'key4', 'key5' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one',
  key: 'key1' }
info: starting promise gtt0tvak
info: resolving promise gtt0tvak
debug: return from body.render: '<li>key1, one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two',
  key: 'key2' }
info: starting promise gtt0tval
info: resolving promise gtt0tval
debug: return from body.render: '<li>key2, two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three',
  key: 'key3' }
info: starting promise gtt0tvam
info: resolving promise gtt0tvam
debug: return from body.render: '<li>key3, three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 4,
  key: 'key4' }
info: starting promise gtt0tvan
info: resolving promise gtt0tvan
debug: return from body.render: '<li>key4, 4</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five',
  key: 'key5' }
info: starting promise gtt0tvao
info: resolving promise gtt0tvao
debug: return from body.render: '<li>key5, five</li>'
info: starting promise gtt1egmz
info: starting promise gtt1egn1
info: resolving promise gtt1egn1
info: starting promise gtt1egn2
info: resolving promise gtt1egn2
debug: the items in each[ 'one', 'two', 'three', 'four', 'five' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'two', 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one' }
info: starting promise gtt1egn3
info: resolving promise gtt1egn3
debug: return from body.render: '<li>one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two' }
info: starting promise gtt1egn4
info: resolving promise gtt1egn4
debug: return from body.render: '<li>two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three' }
info: starting promise gtt1egn5
info: resolving promise gtt1egn5
debug: return from body.render: '<li>three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'four' }
info: starting promise gtt1egn6
info: resolving promise gtt1egn6
debug: return from body.render: '<li>four</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five' }
info: starting promise gtt1egn7
info: resolving promise gtt1egn7
debug: return from body.render: '<li>five</li>'
debug: the items in each:[ 'one', 'two', 'three', 4, 'five' ]
debug: the keys in each:[ 'key1', 'key2', 'key3', 'key4', 'key5' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one',
  key: 'key1' }
info: starting promise gtt1egn8
info: resolving promise gtt1egn8
debug: return from body.render: '<li>key1, one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two',
  key: 'key2' }
info: starting promise gtt1egn9
info: resolving promise gtt1egn9
debug: return from body.render: '<li>key2, two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three',
  key: 'key3' }
info: starting promise gtt1egna
info: resolving promise gtt1egna
debug: return from body.render: '<li>key3, three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 4,
  key: 'key4' }
info: starting promise gtt1egnb
info: resolving promise gtt1egnb
debug: return from body.render: '<li>key4, 4</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five',
  key: 'key5' }
info: starting promise gtt1egnc
info: resolving promise gtt1egnc
info: starting promise gtt1iykh
info: starting promise gtt1iyki
info: starting promise gtt1iykj
info: resolving promise gtt1iykj
info: starting promise gtt1iykk
info: resolving promise gtt1iykk
debug: the items in each[ 'one', 'two', 'three', 'four', 'five' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'two', 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one' }
info: starting promise gtt1iykl
info: resolving promise gtt1iykl
debug: return from body.render: '<li>one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two' }
info: starting promise gtt1iykm
info: resolving promise gtt1iykm
debug: return from body.render: '<li>two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three' }
info: starting promise gtt1iykn
info: resolving promise gtt1iykn
debug: return from body.render: '<li>three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'four' }
info: starting promise gtt1iyko
info: resolving promise gtt1iyko
debug: return from body.render: '<li>four</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five' }
info: starting promise gtt1iykp
info: resolving promise gtt1iykp
debug: return from body.render: '<li>five</li>'
debug: the items in each:[ 'one', 'two', 'three', 4, 'five' ]
debug: the keys in each:[ 'key1', 'key2', 'key3', 'key4', 'key5' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one',
  key: 'key1' }
info: starting promise gtt1iykq
info: resolving promise gtt1iykq
debug: return from body.render: '<li>key1, one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two',
  key: 'key2' }
info: starting promise gtt1iykr
info: resolving promise gtt1iykr
debug: return from body.render: '<li>key2, two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three',
  key: 'key3' }
info: starting promise gtt1iyks
info: resolving promise gtt1iyks
debug: return from body.render: '<li>key3, three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 4,
  key: 'key4' }
info: starting promise gtt1iykt
info: resolving promise gtt1iykt
debug: return from body.render: '<li>key4, 4</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five',
  key: 'key5' }
info: starting promise gtt1iyku
info: resolving promise gtt1iyku
debug: return from body.render: '<li>key5, five</li>'
info: resolving promise gtt1iyki
info: starting promise gtt1jywt
info: starting promise gtt1jywu
info: starting promise gtt1jywv
info: resolving promise gtt1jywv
info: starting promise gtt1jyww
info: resolving promise gtt1jyww
debug: the items in each[ 'one', 'two', 'three', 'four', 'five' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'two', 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one' }
info: starting promise gtt1jywx
info: resolving promise gtt1jywx
debug: return from body.render: '<li>one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two' }
info: starting promise gtt1jywy
info: resolving promise gtt1jywy
debug: return from body.render: '<li>two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three' }
info: starting promise gtt1jywz
info: resolving promise gtt1jywz
debug: return from body.render: '<li>three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'four' }
info: starting promise gtt1jyx0
info: resolving promise gtt1jyx0
debug: return from body.render: '<li>four</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five' }
info: starting promise gtt1jyx1
info: resolving promise gtt1jyx1
debug: return from body.render: '<li>five</li>'
debug: the items in each:[ 'one', 'two', 'three', 4, 'five' ]
debug: the keys in each:[ 'key1', 'key2', 'key3', 'key4', 'key5' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one',
  key: 'key1' }
info: starting promise gtt1jyx2
info: resolving promise gtt1jyx2
debug: return from body.render: '<li>key1, one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two',
  key: 'key2' }
info: starting promise gtt1jyx3
info: resolving promise gtt1jyx3
debug: return from body.render: '<li>key2, two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three',
  key: 'key3' }
info: starting promise gtt1jyx4
info: starting promise gtt1l0xz
info: starting promise gtt1l0y0
info: starting promise gtt1l0y1
info: resolving promise gtt1l0y1
info: starting promise gtt1l0y2
info: resolving promise gtt1l0y2
debug: the items in each[ 'one', 'two', 'three', 'four', 'five' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'two', 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one' }
info: starting promise gtt1l0y3
info: resolving promise gtt1l0y3
debug: return from body.render: '<li>one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two' }
info: starting promise gtt1l0y4
info: resolving promise gtt1l0y4
debug: return from body.render: '<li>two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three' }
info: starting promise gtt1l0y5
info: resolving promise gtt1l0y5
debug: return from body.render: '<li>three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'four' }
info: starting promise gtt1l0y6
info: resolving promise gtt1l0y6
debug: return from body.render: '<li>four</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five' }
info: starting promise gtt1l0y7
info: resolving promise gtt1l0y7
debug: return from body.render: '<li>five</li>'
debug: the items in each:[ 'one', 'two', 'three', 4, 'five' ]
debug: the keys in each:[ 'key1', 'key2', 'key3', 'key4', 'key5' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one',
  key: 'key1' }
info: starting promise gtt1l0y8
info: resolving promise gtt1l0y8
debug: return from body.render: '<li>key1, one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two',
  key: 'key2' }
info: starting promise gtt1l0y9
info: resolving promise gtt1l0y9
debug: return from body.render: '<li>key2, two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three',
  key: 'key3' }
info: starting promise gtt1l0ya
info: resolving promise gtt1l0ya
debug: return from body.render: '<li>key3, three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 4,
  key: 'key4' }
info: starting promise gtt1l0yb
info: resolving promise gtt1l0yb
debug: return from body.render: '<li>key4, 4</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five',
  key: 'key5' }
info: starting promise gtt1l0yc
info: resolving promise gtt1l0yc
debug: return from body.render: '<li>key5, five</li>'
info: resolving promise gtt1l0y0
info: loading files for /home/jon/gits/node-template/examplesand keyPrefix undefined
debug: text in file base.tpl: '{*\nBase file that will be extended by another file.\n*}\n<html>\n<head>\n  <title>{{title}}</title>\n</head>\n<body>\n  {+ content +}\n    <p>this content should get overwritten</p>\n  {+/ content +}\n  {! \'footer\' !}\n</body>\n</html>'
debug: text in file basic.tpl: '{*\nAn exmple of a basic template. This is a block comment that will be stripped.\n*}\n{= var1 \'some random text\' =}\n{= var2 354 =}\n<html>\n<head>\n  <title>{{title}}</title>\n</head>\n<body>\n  <p>{{content}}</p>\n  <p>{{test3.some.nested.var}}</p>\n  <P>\n    {@ if test @}\n        test defined\n    {e} \n        test not defined\n    {@/ if @}\n  </p>\n  <p>\n    {@ if test && test2>0 @}\n        {{compoundIf}}\n    {@/ if @}\n  </p>\n  <ul>\n    {@ each testEach1 @}\n        <li>{{item}}</li>\n    {@/ each @}\n  </ul>\n  <ul>\n    {@ each testEach2 @}\n        <li>{{key}}, {{item}}</li>\n    {@/ each @}\n  </ul>\n  <p>The value of the assign at the top of the template is {{var1}}</p>\n  <p>And the second one was {{var2}}</p>\n  {! \'footer\' !}\n</body>\n</html>'
debug: text in file footer.tpl: '<p>\n  This is the footer.... included from a separate file!\n</p>'
debug: text in file filters.tpl: '<html>\n<head>\n  <title>{{title}}</title>\n</head>\n<body>\n    <p>\n        A test of the filters:\n    </p>\n    <ul>\n        <li>The date ({{date}}) when formatted for the database: {{date|date(db)}}</li>\n        <li>A title ({{title}}) filtered with title: {{title|title}}</li>\n        <li>A word ({{word}}) capitalized: {{word|capitalize}}</li>\n        <li>The same word in uppercase: {{word|upper}}</li>\n        <li>an uppercase word ({{upper}}) lowercased: {{upper|lower}}</li>\n        <li>a undefined variable with a default value: {{test|default(\'no value\')}}</li>\n        <li>An array joined: {{arr|join(\',\')}}</li>\n        <li>An object JSON encoded: {{obj|json_encode}}</li>\n        <li>A string of HTML escaped: {{html|escape}} </li>\n    </ul>\n\n</body>\n</html>'
debug: text in file extends.tpl: '{# \'base\' #}\n{= title \'The title of the page\' =}\n{= var1 \'some random text\' =}\n{= var2 354 =}\n{+ content +}\n  <p>{{test3.some.nested.var}}</p>\n  <P>\n    {@ if test @}\n        test defined\n    {e} \n        test not defined\n    {@/ if @}\n  </p>\n  <p>\n    {@ if test && test2>0 @}\n        {{compoundIf}}\n    {@/ if @}\n  </p>\n  <ul>\n    {@ each testEach1 @}\n        <li>{{item}}</li>\n    {@/ each @}\n  </ul>\n  <ul>\n    {@ each testEach2 @}\n        <li>{{key}}, {{item}}</li>\n    {@/ each @}\n  </ul>\n  <p>The value of the assign at the top of the template is {{var1}}</p>\n  <p>And the second one was {{var2}}</p>\n{+/ content +}'
info: starting promise gtt3jr4j
info: resolving promise gtt3jr4m
debug: the items in each[ 'one', 'two', 'three', 'four', 'five' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'two', 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one' }
info: starting promise gtt3jr4n
info: resolving promise gtt3jr4n
debug: return from body.render: '<li>one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'three', 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two' }
info: starting promise gtt3jr4o
info: resolving promise gtt3jr4o
debug: return from body.render: '<li>two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'four', 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three' }
info: starting promise gtt3jr4p
info: resolving promise gtt3jr4p
debug: return from body.render: '<li>three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [ 'five' ],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'four' }
info: starting promise gtt3jr4q
info: resolving promise gtt3jr4q
debug: return from body.render: '<li>four</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five' }
info: starting promise gtt3jr4r
info: resolving promise gtt3jr4r
debug: return from body.render: '<li>five</li>'
debug: the items in each:[ 'one', 'two', 'three', 4, 'five' ]
debug: the keys in each:[ 'key1', 'key2', 'key3', 'key4', 'key5' ]
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'one',
  key: 'key1' }
info: starting promise gtt3jr4s
info: resolving promise gtt3jr4s
debug: return from body.render: '<li>key1, one</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'two',
  key: 'key2' }
info: starting promise gtt3jr4t
info: resolving promise gtt3jr4t
debug: return from body.render: '<li>key2, two</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'three',
  key: 'key3' }
info: starting promise gtt3jr4u
info: resolving promise gtt3jr4u
debug: return from body.render: '<li>key3, three</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 4,
  key: 'key4' }
info: starting promise gtt3jr4v
info: resolving promise gtt3jr4v
debug: return from body.render: '<li>key4, 4</li>'
debug: the context:{ title: 'The title of the page',
  test: true,
  test2: 3,
  test3: { some: { nested: { var: 'Found the nested variable.' } } },
  compoundIf: 'Compound if works!!',
  testEach1: [],
  testEach2: 
   { key1: 'one',
     key2: 'two',
     key3: 'three',
     key4: 4,
     key5: 'five' },
  var1: 'some random text',
  var2: '354',
  item: 'five',
  key: 'key5' }
info: starting promise gtt3jr4w
info: resolving promise gtt3jr4w
debug: return from body.render: '<li>key5, five</li>'
info: resolving promise gtt3jr4k
info: starting promise gtt3jr4x
info: starting promise gtt3jr4y
info: resolving promise gtt3jr4y
info: resolving promise gtt3jr4x
info: resolving promise gtt3jr4j
